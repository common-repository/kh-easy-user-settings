<?php

/**
 * The admin-specific functionality of the plugin.
 *
 * @link       https://knowhalim.com
 * @since      1.0.0
 *
 * @package    Kh_User_Settings
 * @subpackage Kh_User_Settings/admin
 */

/**
 * The admin-specific functionality of the plugin.
 *
 * Defines the plugin name, version, and two examples hooks for how to
 * enqueue the admin-specific stylesheet and JavaScript.
 *
 * @package    Kh_User_Settings
 * @subpackage Kh_User_Settings/admin
 * @author     Halim <contact@knowhalim.com>
 */
class Kh_User_Settings_Admin {

	/**
	 * The ID of this plugin.
	 *
	 * @since    1.0.0
	 * @access   private
	 * @var      string    $plugin_name    The ID of this plugin.
	 */
	private $plugin_name;

	/**
	 * The version of this plugin.
	 *
	 * @since    1.0.0
	 * @access   private
	 * @var      string    $version    The current version of this plugin.
	 */
	private $version;

	/**
	 * Initialize the class and set its properties.
	 *
	 * @since    1.0.0
	 * @param      string    $plugin_name       The name of this plugin.
	 * @param      string    $version    The version of this plugin.
	 */
	public function __construct( $plugin_name, $version ) {

		$this->plugin_name = $plugin_name;
		$this->version = $version;

	}

	/**
	 * Register the stylesheets for the admin area.
	 *
	 * @since    1.0.0
	 */
	public function enqueue_styles() {

		/**
		 * This function is provided for demonstration purposes only.
		 *
		 * An instance of this class should be passed to the run() function
		 * defined in Kh_User_Settings_Loader as all of the hooks are defined
		 * in that particular class.
		 *
		 * The Kh_User_Settings_Loader will then create the relationship
		 * between the defined hooks and the functions defined in this
		 * class.
		 */

		wp_enqueue_style( $this->plugin_name, plugin_dir_url( __FILE__ ) . 'css/kh-user-settings-admin.css', array(), $this->version, 'all' );

	}

	/**
	 * Register the JavaScript for the admin area.
	 *
	 * @since    1.0.0
	 */
	public function enqueue_scripts() {

		/**
		 * This function is provided for demonstration purposes only.
		 *
		 * An instance of this class should be passed to the run() function
		 * defined in Kh_User_Settings_Loader as all of the hooks are defined
		 * in that particular class.
		 *
		 * The Kh_User_Settings_Loader will then create the relationship
		 * between the defined hooks and the functions defined in this
		 * class.
		 */

		wp_enqueue_script( $this->plugin_name, plugin_dir_url( __FILE__ ) . 'js/kh-user-settings-admin.js', array( 'jquery' ), $this->version, false );

	}

}




function kh_get_recommends_easy_user_settings(){


	$args_post = array(
       'method' => 'POST',
    'timeout' => 45,
    'redirection' => 5,
    'httpversion' => '1.1',
    'blocking' => true,
	'body'        => '{"about": "Easy user settings"}',
	'sslverify' => false,
	'headers'     => array(
		'Content-type' => 'application/json',
		'Authorization'=> 'Bearer 22jd948hhfrg'
	  ),
      'cookies' => array() 
	);


	$response = wp_remote_post( 'https://knowhalim.com/wp-json/kh_plugin/v1/recommend', $args_post );
	
	 $res = $response['body'];
	
	$returnvalue = json_decode($res,true);

	$display='<div class="recommends">'.$returnvalue['instruction'].'<h3>Other recommendations</h3>';
	foreach ($returnvalue['news'] as $item){
		$display .='<div class="kh_news">'.$item.'</div>';
	}
	$display .='</div>';
	return $display;
}

class EasyFrontendUserSettings {
	private $easy_frontend_user_settings_options;

	public function __construct() {
		add_action( 'admin_menu', array( $this, 'easy_frontend_user_settings_add_plugin_page' ) );
		add_action( 'admin_init', array( $this, 'easy_frontend_user_settings_page_init' ) );
	}

	public function easy_frontend_user_settings_add_plugin_page() {
		add_menu_page(
			'Easy Frontend User Settings', // page_title
			'Easy Frontend User Settings', // menu_title
			'manage_options', // capability
			'easy-frontend-user-settings', // menu_slug
			array( $this, 'easy_frontend_user_settings_create_admin_page' ), // function
			'dashicons-admin-settings', // icon_url
			80 // position
		);
	}

	public function easy_frontend_user_settings_create_admin_page() {
		$this->easy_frontend_user_settings_options = get_option( 'easy_frontend_user_settings_option_name' ); ?>

		<div class="wrap">
			<h2>Easy Frontend User Settings</h2>
			<div class="kh_option">
			
				<div class="kh_admin_left">
					<p>The shortcode generated by the plugin creates a form in the frontend to allow user to edit their settings easily. It supports custom user field too.</p>
					<?php settings_errors(); ?>

					<form method="post" action="options.php">
						<?php
							settings_fields( 'easy_frontend_user_settings_option_group' );
							do_settings_sections( 'easy-frontend-user-settings-admin' );
							//submit_button();
						?>
					</form>
				</div>
				<div class="kh_admin_right">
					<?php echo kh_get_recommends_easy_user_settings(); ?>
				</div>
			</div>
		</div>

	<?php }

	public function easy_frontend_user_settings_page_init() {
		register_setting(
			'easy_frontend_user_settings_option_group', // option_group
			'easy_frontend_user_settings_option_name', // option_name
			array( $this, 'easy_frontend_user_settings_sanitize' ) // sanitize_callback
		);

		add_settings_section(
			'easy_frontend_user_settings_setting_section', // id
			'Settings', // title
			array( $this, 'easy_frontend_user_settings_section_info' ), // callback
			'easy-frontend-user-settings-admin' // page
		);

		add_settings_field(
			'use_this_shortcode_0', // id
			'Use This Shortcode', // title
			array( $this, 'use_this_shortcode_0_callback' ), // callback
			'easy-frontend-user-settings-admin', // page
			'easy_frontend_user_settings_setting_section' // section
		);
	}

	public function easy_frontend_user_settings_sanitize($input) {
		$sanitary_values = array();
		if ( isset( $input['use_this_shortcode_0'] ) ) {
			$sanitary_values['use_this_shortcode_0'] = sanitize_text_field( $input['use_this_shortcode_0'] );
		}

		return $sanitary_values;
	}

	public function easy_frontend_user_settings_section_info() {
		
	}

	public function use_this_shortcode_0_callback() {
		printf(
			'<input class="regular-text" type="text" name="easy_frontend_user_settings_option_name[use_this_shortcode_0]" id="use_this_shortcode_0" value="%s" disabled>',
			isset( $this->easy_frontend_user_settings_options['use_this_shortcode_0'] ) ? esc_attr( $this->easy_frontend_user_settings_options['use_this_shortcode_0']) : '[ez_settings]'
		);
	}

}
if ( is_admin() )
	$easy_frontend_user_settings = new EasyFrontendUserSettings();

/* 
 * Retrieve this value with:
 * $easy_frontend_user_settings_options = get_option( 'easy_frontend_user_settings_option_name' ); // Array of All Options
 * $use_this_shortcode_0 = $easy_frontend_user_settings_options['use_this_shortcode_0']; // Use This Shortcode
 */
